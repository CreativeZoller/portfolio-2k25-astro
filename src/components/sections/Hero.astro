---
import { Image } from 'astro:assets';
import IconWrapper from '../IconWrapper';

interface Props {
    background: string;
    heading: string;
    description: string;
}

const { background, heading, description } = Astro.props;
---

<section 
    class="relative w-full overflow-hidden h-[307px] md:h-[390px] lg:h-[530px] xl:h-[670px] 2xl:h-[795px]" 
    id="hero-section"
>
    <div class="md:hidden absolute inset-0 z-10">
        <Image
            src={background}
            width={800}
            height={450}
            alt=""
            class="w-full h-full object-cover"
            quality="mid"
        />
    </div>

    <div class="hidden md:block absolute inset-0 z-10">
        <svg 
            xmlns="http://www.w3.org/2000/svg" 
            xmlns:xlink="http://www.w3.org/1999/xlink" 
            width="100%" 
            height="100%" 
            fill="none" 
            class="absolute inset-0 z-10 w-full h-full"
            viewBox="0 0 1440 795"
            preserveAspectRatio="xMidYMax meet"
        >
            <defs>
                <mask id="hero-mask">
                    <path 
                        fill="white" 
                        d="M0 0h1440v116.398l-92.5 510.635L0 795V0Z"
                    />
                </mask>
                <pattern 
                    id="hero-image" 
                    patternUnits="userSpaceOnUse"
                    width="100%" 
                    height="100%"
                >
                    <image 
                        href={background} 
                        x="0"
                        y="0"
                        width="100%" 
                        height="100%" 
                        preserveAspectRatio="xMidYMid slice"
                    />
                </pattern>
            </defs>
            
            <g mask="url(#hero-mask)">
                <rect width="100%" height="100%" fill="url(#hero-image)"/>
            </g>
        </svg>
    </div>

    <div 
        class="relative z-20 flex items-center h-full w-full px-6 lg:px-12" 
        id="hero-wrapper"
    >
        <div 
            class="text-left w-full lg:w-7/12" 
            id="hero-content"
        >
            <h1 
                class="text-4xl lg:text-5xl mb-6 text-accent-1" 
                id="hero-heading"
                data-parallax="0.3"
            >
                {heading}
            </h1>
            <p 
                class="hidden md:block text-sm lg:text-base text-accent-1 leading-relaxed"
                id="hero-description"
                data-parallax="0.2"
            >
                {description}
            </p>
        </div>
    </div>

    <div 
        class="scroller flex items-center gap-2 transform rotate-90"
        id="scroller"
        data-parallax="0.1"
    >
        <span class="uppercase tracking-wider text-sm">scroll</span>
        <IconWrapper 
            icon="mingcute:arrow-right-line"
            client:load 
        />
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const heading = document.getElementById('hero-heading');
        const description = document.getElementById('hero-description');
        const scroller = document.getElementById('scroller');
        
        let lastScrollY = window.scrollY;
        let ticking = false;

        const updateParallax = () => {
            const elements = [heading, description, scroller];
            
            elements.forEach(element => {
                if (!element) return;
                
                const speed = parseFloat(element.getAttribute('data-parallax') || '0');
                const rect = element.getBoundingClientRect();
                const visible = rect.top < window.innerHeight && rect.bottom > 0;
                
                if (visible) {
                    const yPos = -(window.scrollY * speed);
                    if (element.id === 'scroller') {
                        // Keep the rotation while adding parallax translation
                        element.style.transform = `translate3d(0, ${yPos}px, 0) rotate(90deg)`;
                    } else {
                        element.style.transform = `translate3d(0, ${yPos}px, 0)`;
                    }
                }
            });

            ticking = false;
        };

        window.addEventListener('scroll', () => {
            lastScrollY = window.scrollY;
            
            if (!ticking) {
                window.requestAnimationFrame(() => {
                    updateParallax();
                });
                ticking = true;
            }
        });

        // Initial position
        updateParallax();
    });
</script>

<style>
    #hero-heading,
    #hero-description {
        will-change: transform;
        transform: translate3d(0, 0, 0);
        transition: transform 0.1s linear;
    }

    #hero-section {
        transform-style: preserve-3d;
    }

    #hero-section svg {
        width: 100%;
        height: 100%;
    }

    @media (min-width: 1024px) {
        #hero-section svg {
            max-height: 530px;
        }
    }

    @media (min-width: 1280px) {
        #hero-section svg {
            max-height: 670px;
        }
    }

    @media (min-width: 1536px) {
        #hero-section svg {
            max-height: 795px;
        }
    }
</style>